# Resumo: Introdução à Análise de Algoritmos.<br />
###Sonaly Nunes, 06/2021.

Ao desenvolvermos um algoritmo deveremos investigar sua legibilidade, modularidade, simplicidade, facilidade de manutenção, corretude e o que estudaremos com enfâse a sua 
**eficiência/desempenho***.<br />

Ao nos deparamos com problemas computacionais, diversas soluções poderão ser propostas. Por exemplo, para ordenar um sequência de números, o desenvolvedor pode utilizar algoritmos como o BubbleSort, MergeSort e etc.
No entanto, qual seria seria o melhor o algoritmo a ser utilizado? Isso dependerá do nosso contexto.<br />

*Comparar diferentes soluções para o mesmo problema.*<br />

Entender como esses algoritmos funcionam se comportam à medida que aumentamos o tamanho da entrada a ser ordenada é primordial para decidirmos qual solução adotar.

##Análise de Eficiência.

A análise de eficiência determinará a quantidade de recursos computacionais que um algoritmo irá consumir em sua execução (Processamento e memória). <br />
Esse procedimento de analisar, nos ajudará a excluir as soluções não tão **"eficiêntes"/"adequadas"**.<br />
Nesse momento, iremos nos preocupar com o tempo de execução desse algoritmo.<br />

##Métodos para analisar tempo de execução.

Uma abordagem direta para analisar o desempenho de um algoritmo é a abordagem empírica. Para isso precisaremos de ambiente em que as variáveis são controladas
e executa-se os algoritmos com intenção de medir o tempo de computação e comparar as diferentes soluções. 
O tempo de execução (eixo y) é medido em função do tamanho da entrada (eixo x).
Como por exemplo, se fossemos analisar empiricamente um algoritmo de ordenação medimos o tempo de execução para diferentes tamanhos de arrays.<br /><br />

Essa abordagem é de alta precisão, pois seus resultados virão em tempo exato (s), entretanto, é um procedimento demorado e caro.<br />

No entanto, nem sempre pecisamos de um alto nível de precisão. Mas, precisamos de um método que seja:<br />

```
- Simples;
- Permita análise sem execução.
- Independente de hardware;
- Análise os algoritmos em um espectro maior de entradas;
```
<br />

Uma abordagem que nos permitirá isso, será o método analítico.<br />
Nesse contexto, o tempo de execução de um algoritmo é a soma do custo das operações primitivas.<br />

Quais são as operações primitivas?
> • Atribuição (i = 1); <br />
> • Retorno de métodos (return true;);<br />
> • Operações matemáticas (*, -, +, %, etc);<br />
> • Avaliação de expressões booleanas (i >= 1; i == 1, etc);<br />
> • Acesso à variáveis e posições arbitrárias de um array (v[j]).<br />

###Exemplo: Vamos analisar um código responsável por multiplicar o resto por uma parte inteira.<br />

>int multiplicaRestoPorParteInteira(int i, int j) {
    >int resto = i % j;
    >int parteInteira = i / j;
    >int resultado = resto * parteInteira;
    >return resultado;
>}

Para analisarmos a soma dos custos, vamos seguir os passos de:<br />
> **1º Passo:** Devemos identificar as primitivas, cada uma das primitivas terão valor constante.<br />
> **2º Passo:** Devemos identificar a quantidade de vezes que cada uma das primitivas é executada.<br />
> **3º Passo:** Ao final devemos somar as execuções das primitivas. <br />

No exemplo a cima, temos como primitiva: <br /><br />

• primitiva **c1** -> atribuição ( resto = ) <br />
• primitiva **c2** -> operação arit.( i % j ) <br />
• primitiva **c3** -> atribuição ( parteInteira = ) <br />
• primitiva **c4** -> operação arit. ( i / j ) <br />
• primitiva **c5** -> atribuição ( resultado = )<br />
• primitiva **c6** -> operação arit.( resto * parteInteira )<br />
• primitiva **c7** -> retorno de método ( return resultado )<br />

Todas constantes acima são executadas apenas uma vez. (Passo 02) <br />
A soma de execuções resulta em 7c. (Passo 03)  <br />

Quando se houver condicionais, sempre iremos considerar a pior hipotése (a qual leva maior tempo de execução).

###Exemplo 02:

>double precisaNaFinal(double nota1, double nota2, double nota3) {

    >double media = (nota1 + nota2 + nota3) / 3;
        
    >if (media >= 7 || media < 4) {
        >return 0;
        
    >} else {
        >double mediaFinal = 5;
        >double pesoFinal = 0.4;
        >double pesoMedia = 0.6;
        >double precisa = (mediaFinal - pesoMedia * media) / pesoFinal;    
        >return precisa;
    >}
>}

No exemplo a cima, temos como primitiva: <br /><br />

• primitiva **c1** -> atribuição ( media = ) <br />
• primitiva **c2** -> operação arit. ( (nota1 + nota2 + nota3) ) <br />
• primitiva **c3** -> operação arit. ( ... / 3 ) <br />
• primitiva **c4** -> avaliação de exp. booleana (media >=7 || media < 4) <br />
• primitiva **c5** -> retorno de método ( return 0; )<br />
• primitiva **c6** -> atribuição ( mediaFinal = ) <br />
• primitiva **c7** -> atribuição ( pesoFinal = ) <br />
• primitiva **c8** -> atribuição ( pesoMedia = ) <br />
• primitiva **c9** -> atribuição ( precisa = ) <br />
• primitiva **c10** -> operação arit.( pesoMedia * media ) <br />
• primitiva **c11** -> operação arit.( mediaFinal - ... ) <br />
• primitiva **c12** -> operação arit.( ... / pesoFinal ) <br />
• primitiva **c13** -> retorno de método ( return precisa ) <br />

Para o passo 02, iremos considerar o bloco condicional mais custoso, que seria executando o 'else', portanto, descartamos nossa constante c5.
Ao analisarmos, todas constantes se repetem apenas uma vez.  <br />

Passo 03: Soma de todas constantes. O resultado será 12c, já que o c5 foi descartado.

Quando houver iteração, o que irá ser modificado é que nossas primitivas podem ser executadas mais de uma vez.

##Exemplo:

> public static boolean contains(int[] v, int n) {
    for (int i = 0; i < v.length; i++)
        if (v[i] == n)
            return true;
    return false;
} <

No exemplo acima, temos como primitivas: <br /><br />

• primitiva **c1** -> atribuição ( int i = 0 ) <br />
• primitiva **c2** -> avaliação de exp. booleana ( i < v.length ) <br />
• primitiva **c3** -> operação arit.( i++ ) <br />
• primitiva **c4** -> avaliação de exp. booleana ( v[i] == n ) <br />
• primitiva **c5** -> retorno de método ( return true ) <br />
• primitiva **c6** -> retorno de método ( return false ) <br />

Para o passo 02, como vimos anteriormente, iremos considerar sempre o bloco condicional mais custoso, portanto, iremos desconsiderar a primitiva c5.<br /><br />
• primitiva **c1** -> executada apenas uma vez.<br />
• primitiva **c2** -> executada n+1 vezes.<br />
• primitiva **c3** -> executada n vezes.<br />
• primitiva **c4** -> executada n vezes.<br />
• primitiva **c6** -> executada apenas uma vez.<br />

Para o passo 03, iremos calcular o custo total.

F(n) = c1 + c2 * (n + 1) + c3 * n + c4 * n + c6.
F(n) = 3 * c * n + 3 c

Quando se houver loops aninhadas.

###Exemplo 03:

> public boolean contemDuplicacao(int[] v) {
    for (int i = 0; i < v.length; i++)
        for (int j = i + 1; j < v.length; j++)
            if (v[i] == v[j])
                return true;
    return false;
} <

• primitiva **c1** -> atribuição ( int i = 0 ) <br />
• primitiva **c2** -> avaliação de exp. booleana ( i < v.length ) <br />
• primitiva **c3** -> operação arit.( i++ ) <br />
• primitiva **c4** -> atribuição ( int j = ) <br />
• primitiva **c5** -> operação arit.( ... i + 1 ) <br />
• primitiva **c6** -> avaliação de exp. booleana ( j < v.length ) <br />
• primitiva **c7** -> operação arit.( j++ ) <br />
• primitiva **c8** -> avaliação de exp. booleana ( v[i] == v[j]) <br />
• primitiva **c9** -> retorno de método ( return true ) <br />
• primitiva **c10** -> retorno de método ( return false ) <br />

Para o passo 02, iremos considerar a condicional mais "custosa", portanto, descartaremos a primitiva c9.<br />

• primitiva **c1** -> executada apenas uma vez.<br />
• primitiva **c2** -> executada n+1 vezes.<br />
• primitiva **c3** -> executada n vezes.<br />
• primitiva **c4** -> executada n vezes.<br />
• primitiva **c5** -> executada n vezes.<br />
• primitiva **c6** -> executada (n²+n)/2  vezes. <br />
• primitiva **c7** -> executada  n²/2 vezes. <br />
• primitiva **c8** -> executada  n²/2 vezes. <br />
• primitiva **c10** -> executada apenas uma vez. <br />

Passo 03: Soma de custo. <br />

F(n) =c1 + c2∗(n+1) + c3∗n + c4∗n + c5∗n + c6 (n2+n)/2 + c7∗n2/2 + c8∗n2/2 + c10

